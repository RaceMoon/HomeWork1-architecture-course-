Вопрос:

Написать (текстом) по 2 возможных варианта использования паттерна стратегия и паттерна шаблонный метод в игре. 

Ответ:

Паттерн СТРАТЕГИЯ используется в случае, когда необходимо подменить поведение объекта. Примеры: 

Пример 1. Поведение NPC в зависимости от действий игрока: игрок в розыске, значит стража должна исполнять поведение поиска и атаки игрока в случае, если увидит его. 
При этом, в теории, через данный паттерн можно реализовать и поведение стражников в случае, когда игрок не в розыске. Тогда у нас будет минимум 2 стратегии: 
Первая стратегия реализует состояние стражника: аггресивный к игроку или спокойный;
Вторая стратегия реализует поведение стражника внутри состояний: что будет делать стражник, если увидит игрока; будет ли он его искать, если стоит на месте.

Пример 2. Поведение предмета в зависимости от условий. Пример: Есть ломбард. Игрок в роли оценщика. Игроку приносят кольцо на оценку. 
Так как кольцо не находится в собственности оценщика, то при нажатии левой кнопкой мыши должно появится окно с проверкой изделия на подлинность. При этом перетаскивать предмет при помощи удержания ЛКМ нельзя 
Иначе, если кольцо находится в собственности оценщика, при нажатии левой кнопкой мыши должно появится окно с ценой изделия, и можно перетаскивать предмет при помощи ЛКМ.
Т.о. паттерн стратегия позволяет подменять поведение предмета в зависимости от условий.
Кроме того, если приносят не ценность, мы можем задать иное поведение при взаимодействии с объектом.

Вопрос: если у меня много предметов, которые должны вести себя по разному при нажатии на них, и у каждого есть несколько разных поведений: мне делать проверку условий в классе предмета, и туда же заранее передать ему варианты поведения, 
или лучше сделать отдельный класс, который будет хранить в себе все возможные условия предметов, все возможные поведения, и передавать их предметам?

Паттерн ШАБЛОН используется в случае, когда существует несколько объектов "родственных" друг к другу (реализующих похожие методы и часть одинаковых полей). Примеры:

Пример 1. В ломбард могут принести разные предметы: серьги, кольца, алмазы, холодильник, тостер, визитки, оружие самообороны.
Но можно выделить несколько семейств предметов. Во-первых, можно выделить абстрактный класс "Ценности", на которые оценщик может выдать залог. Данный класс содержит поля спрайт объекта, стоимость, спрайт завода-изготовителя, поле "Передать информацию в чек".
Во-вторых от ценностей можно сделать дочерние классы "Золотые предметы", "Алмазные предметы", "Бытовая техника", так как механика проверки на подлинность каждой категории различается, к тому же будут различаться наборы спрайтов заводов изготовителей и разная информация в чеке.
В третьих, можно сделать класс "GeneralItem", который будет родительским для класса "Ценности", и от которого будут наследоваться остальные предметы (дубинка для самообороны, визитки от клиентов, фикус "Олег").
С другой стороны, можно сделать интерфейс IItem, и повесить на класс "Ценности" и на все остальные предметы, так как между "ценностями" и не ценностями (дубинка и т.д.) мало общего. 
Таким образом мы реализуем абстракцию с помощью интерфейса, и откажемся от ненужного в данном случае класса GeneralItem.

Пример 2. Есть абстрактный класс "Воин", которые имеет поля (здоровье, защита, урон) и методы (атаковать, применить особую способность). Можно сделать дочерние классы с рассами персонажей: Орк, Человек, Эльф и т.д. 
У каждого дочернего класса будет своя реализация атаки и особых способностей, а при инициализации класса будут задаваться свои рандомные значения основных статов.